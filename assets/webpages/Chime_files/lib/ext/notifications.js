// Generated by CoffeeScript 1.6.3
var FeedType, FetchStatus, LoadStatusCodes, Notification, PageStatus, Site, SiteStatus, initSites, loadNotif, loadNotifs, saveNotifs, serializeNotif, sortNotifications,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

PageStatus = {
  LOADING: "loading",
  COMPLETE: "complete"
};

SiteStatus = {
  HAD_ERROR: "error",
  UNINITIALIZED: "uninitialized",
  NEED_AUTH: "need-auth",
  LOGGED_OUT: "logged-out",
  TIMEOUT: "timeout",
  FINISHED: "finished"
};

FeedType = {
  HTML: ".html",
  JSON: ".json",
  XML: ".xml",
  OAUTH: "oauth",
  XHTTP: "xhttp"
};

FetchStatus = {
  INITIAL: "first load",
  PAUSE: "after an error or pause",
  REGULAR: "normal fetch"
};

LoadStatusCodes = {
  OK: "ok",
  TIMEOUT: "timeout",
  UNAUTHORIZED: "unauthorized",
  ERROR: "error",
  NO_NEW: "no_new",
  NEED_AUTH: "need_auth"
};

Notification = (function() {
  var attr;

  attr = null;

  Notification.prototype.hash = '';

  function Notification() {
    this.createHash();
    this.attr = {
      marked: false,
      unread: null,
      seen: false,
      brandnew: false
    };
    return;
  }

  Notification.prototype.createHash = function() {
    var hash_str;
    hash_str = this.url;
    this.hash = hash_str.hashCode();
  };

  Notification.prototype.click = function(mark) {
    var propreties;
    if (mark == null) {
      mark = true;
    }
    if (mark) {
      this.markAsRead(true);
    }
    propreties = {
      url: this.url,
      active: true
    };
    chrome.tabs.create(propreties, function(tab) {
      var error, windowpropreties;
      windowpropreties = {
        focused: true
      };
      try {
        chrome.windows.update(tab.windowId, windowpropreties, function() {});
      } catch (_error) {
        error = _error;
      }
    });
    return mark;
  };

  Notification.prototype.updateAttr = function(newattr) {
    this.attr = newattr;
    if (this.time !== null) {
      if (time_diff(this.time, new Date()).days > 7) {
        this.attr.brandnew = false;
      }
    }
    if (this.site.option_mark_read) {
      if (this.attr.brandnew) {
        this.attr.marked = false;
      }
    } else {
      if (this.attr.marked) {
        this.attr.brandnew = false;
      }
    }
  };

  Notification.prototype.markAsRead = function(read) {
    this.attr.marked = true;
    this.attr.brandnew = false;
    if (this.site.option_mark_read) {
      this.unread = false;
    }
    this.site._notif_hash[this.hash] = {
      unread: this.unread,
      attr: this.attr
    };
  };

  Notification.prototype.markRead = function() {
    if (this.site.option_mark_read) {
      this.markAsRead(true);
    }
  };

  Notification.prototype.hide = function(undo) {
    if (undo == null) {
      undo = false;
    }
    this.attr.marked = true;
    this.attr.brandnew = false;
    this.site._notif_hash[this.hash] = {
      unread: this.unread,
      attr: this.attr
    };
  };

  return Notification;

})();

Site = (function() {
  Site.prototype.priority = null;

  /*
  	Options:
  		Set by individual sites.
  		These should really be private, but there's no nice way to do truly private variables in JavaScript
  */


  Site.prototype.option_quick_check = false;

  Site.prototype.option_slow_check = false;

  Site.prototype.option_feed_type = FeedType.HTML;

  Site.prototype.option_mark_read = false;

  Site._cookiecheckcount = 0;

  Site._notif_hash = null;

  Site.prototype.fetch_status = FetchStatus.INITIAL;

  function Site() {
    this.status = SiteStatus.UNINITIALIZED;
    this.notifications = new Array();
    this._notif_hash = {};
  }

  Site.getter('unread', function() {
    var notif, unread, _i, _len, _ref;
    unread = 0;
    _ref = this.notifications;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      notif = _ref[_i];
      if (notif.unread === true) {
        unread++;
      }
    }
    return unread;
  });

  Site.getter('count_new', function() {
    var notif, unread, _i, _len, _ref;
    unread = 0;
    _ref = this.notifications;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      notif = _ref[_i];
      if (notif.unread === true && notif.attr.marked === false) {
        unread++;
      }
    }
    return unread;
  });

  Site.prototype.parse = function() {};

  Site.prototype.checkCookie = function(cookiematch, changeInfo) {
    var cause, name;
    name = changeInfo.cookie.name;
    cause = changeInfo.cause;
    if (name === cookiematch.name && __indexOf.call(cookiematch.cause, cause) >= 0) {
      this.priority = Math.floor(++this._cookiecheckcount >> 3);
      return this._cookiecheckcount %= 15;
    }
  };

  Site.prototype.checkLoggedIn = function(cookie_details, callbackfunc, matchpattern) {
    var error;
    if (matchpattern == null) {
      matchpattern = null;
    }
    try {
      chrome.cookies.get(cookie_details, function(cookie) {
        var cookie_state, error, matchindex;
        cookie_state = cookie !== null ? LoadStatusCodes.OK : LoadStatusCodes.UNAUTHORIZED;
        if (cookie !== null && matchpattern !== null) {
          try {
            matchindex = cookie.value.search(matchpattern);
            cookie_state = matchindex !== -1 ? LoadStatusCodes.OK : LoadStatusCodes.UNAUTHORIZED;
          } catch (_error) {
            error = _error;
            cookie_state = LoadStatusCodes.UNAUTHORIZED;
          }
        }
        return callbackfunc(cookie_state);
      });
    } catch (_error) {
      error = _error;
      callbackfunc(LoadStatusCodes.UNAUTHORIZED);
    }
  };

  Site.prototype.checkForNew = function(callbackfunc) {
    callbackfunc(this, LoadStatusCodes.OK);
  };

  Site.prototype.checkDomain = function(sitedomain, siteurl) {
    return sitedomain === this.domain || siteurl === this.testurl;
  };

  Site.prototype.checkAuthorized = function() {
    return true;
  };

  Site.prototype.setPriority = function(first_time) {
    if (first_time == null) {
      first_time = false;
    }
    if (first_time) {
      this.priority = 0;
      return;
    }
    if (this.option_quick_check) {
      this.priority = randomInt(1, 2);
    } else if (this.option_slow_check) {
      this.priority = randomInt(14, 22);
    } else {
      this.priority = randomInt(8, 16);
    }
  };

  Site.prototype.genHash = function() {
    var notif, _i, _len, _ref;
    _ref = this.notifications;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      notif = _ref[_i];
      this._notif_hash[notif.hash] = {
        unread: notif.unread,
        attr: notif.attr
      };
    }
  };

  Site.prototype.merge_notifications = function(new_notifs) {
    var brandnew, hash_entry, notif, tmpattr, _i, _len;
    brandnew = 0;
    this.genHash();
    this.notifications.length = 0;
    for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
      notif = new_notifs[_i];
      this.notifications.push(notif);
      hash_entry = this._notif_hash[notif.hash];
      if (hash_entry !== void 0) {
        tmpattr = hash_entry.attr;
      } else {
        tmpattr = notif.attr;
      }
      if ((hash_entry === void 0 || hash_entry.unread === false) && notif.unread === true) {
        tmpattr.brandnew = true;
      } else {
        tmpattr.brandnew = false;
      }
      notif.updateAttr(tmpattr);
      if (notif.attr.brandnew) {
        brandnew++;
      }
    }
    return brandnew;
  };

  return Site;

})();

sortNotifications = function(notifs) {
  notifs.sort(function(a, b) {
    var err;
    try {
      if (a.unread && !b.unread) {
        return -1;
      }
      if (!a.unread && b.unread) {
        return 1;
      }
      if (a.site.name === 'gplus' && b.site.name === 'gplus') {
        if (a.description > b.description) {
          return 1;
        }
        if (a.description < b.description) {
          return -1;
        }
        return 0;
      }
      if (a.time === null && b.time === null) {
        if (a.hash < b.hash) {
          return 1;
        }
        if (a.hash > b.hash) {
          return -1;
        }
        return 0;
      }
      if (a.time === null) {
        return 1;
      }
      if (b.time === null) {
        return -1;
      }
      if (a.time < b.time) {
        return 1;
      }
      if (a.time > b.time) {
        return -1;
      }
      if (a.hash < b.hash) {
        return 1;
      }
      if (a.hash > b.hash) {
        return -1;
      }
    } catch (_error) {
      err = _error;
      console.log(err.message);
      return 0;
    }
    return 0;
  });
};

initSites = function(root) {
  var facebookSite, flickrSite, foursquareSite, githubSite, gmailSite, gplusSite, linkedinSite, quoraSite, redditSite, stackoverflowSite, twitterSite;
  root.sites = new Array();
  root.master_sites = new Array();
  gmailSite = new GmailSite;
  redditSite = new RedditSite;
  facebookSite = new FacebookSite;
  twitterSite = new TwitterSite;
  linkedinSite = new LinkedinSite;
  quoraSite = new QuoraSite;
  githubSite = new GithubSite;
  flickrSite = new FlickrSite;
  stackoverflowSite = new StackoverflowSite;
  foursquareSite = new FoursquareSite;
  gplusSite = new GplusSite;
  root.master_sites.push(gmailSite);
  root.master_sites.push(redditSite);
  root.master_sites.push(facebookSite);
  root.master_sites.push(twitterSite);
  root.master_sites.push(quoraSite);
  root.master_sites.push(githubSite);
  root.master_sites.push(flickrSite);
  root.master_sites.push(stackoverflowSite);
  root.master_sites.push(foursquareSite);
  root.master_sites.push(gplusSite);
  root.sites.push(gmailSite);
  root.sites.push(redditSite);
  root.sites.push(facebookSite);
  root.sites.push(twitterSite);
  root.sites.push(quoraSite);
  root.sites.push(githubSite);
  root.sites.push(flickrSite);
  root.sites.push(stackoverflowSite);
  root.sites.push(foursquareSite);
  return root.sites.push(gplusSite);
};

saveNotifs = function() {
  var notif, serialNotifs, _i, _len, _ref;
  serialNotifs = new Array();
  _ref = root.notes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    notif = _ref[_i];
    serialNotifs.push(serializeNotif(notif));
  }
  localStorage['notifs'] = JSON.stringify(serialNotifs);
};

loadNotifs = function() {
  var notif, serialNotif, serialNotifs, site, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    site.notifications.length = 0;
  }
  if (localStorage.getItem('notifs') === null) {
    return;
  }
  serialNotifs = JSON.parse(localStorage['notifs']);
  for (_j = 0, _len1 = serialNotifs.length; _j < _len1; _j++) {
    serialNotif = serialNotifs[_j];
    notif = loadNotif(serialNotif);
    notif.site.notifications.push(notif);
  }
  _ref1 = root.sites;
  for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
    site = _ref1[_k];
    if (site.notifications.length > 0) {
      site.status = SiteStatus.FINISHED;
      site.fetch_status = FetchStatus.LOGIN;
    }
    site.genHash();
  }
  refreshDisplays();
};

serializeNotif = function(notif) {
  var obj;
  obj = {};
  obj['site'] = notif.site.name;
  obj['unread'] = notif.unread;
  obj['url'] = notif.url;
  obj['time'] = notif.time;
  obj['description'] = notif.description;
  obj['attr'] = notif.attr;
  return obj;
};

loadNotif = function(storedNotif) {
  var attr, cls, notif, obj;
  cls = null;
  switch (storedNotif['site']) {
    case "facebook":
      cls = FacebookNotification;
      break;
    case "reddit":
      cls = RedditNotification;
      break;
    case "gmail":
      cls = GmailNotification;
      break;
    case "linkedin":
      cls = LinkedinNotification;
      break;
    case "quora":
      cls = QuoraNotification;
      break;
    case "twitter":
      cls = TwitterNotification;
      break;
    case "github":
      cls = GithubNotification;
      break;
    case "stackoverflow":
      cls = StackoverflowNotification;
      break;
    case "flickr":
      cls = FlickrNotification;
      break;
    case "foursquare":
      cls = FoursquareNotification;
      break;
    case "gplus":
      cls = GplusNotification;
      break;
    default:
      cls = null;
  }
  obj = storedNotif;
  notif = new cls(obj['description'], obj['url'], new Date(obj['time']), obj['unread']);
  attr = obj['attr'];
  if (attr.marked === void 0) {
    attr.marked = false;
  }
  if (attr.brandnew === void 0) {
    attr.brandnew = false;
  }
  if (attr.seen === void 0) {
    attr.seen = false;
  }
  notif.attr = attr;
  return notif;
};
