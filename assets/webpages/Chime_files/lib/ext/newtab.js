// Generated by CoffeeScript 1.6.3
var clearFilter, clearNotifications, findSite, groupClick, refreshSettings, refreshView, renderInfoBox, renderSiteBlocks, setupSettings, setupTutorial, siteClick;

root.selected_sites = [];

clearNotifications = function(fadein, callback) {
  var count, fadeNextElement, notifs;
  notifs = $('#notifications').children('.notification');
  count = $('#notifications').children('.notification').length;
  fadeNextElement = function(index) {
    var nextIndex, notif;
    notif = notifs[index];
    if (!fadein) {
      $(notif).fadeTo('fast', 0, null);
    } else {
      $(notif).fadeTo('fast', 1, null);
    }
    nextIndex = index + 1;
    if (nextIndex < count && nextIndex < 10) {
      setTimeout(fadeNextElement, 50, nextIndex);
    } else {
      callback();
    }
  };
  if (count > 0) {
    return fadeNextElement(0);
  } else {
    return callback();
  }
};

refreshView = function(fade, first) {
  var group_notifs, grouped_sites, notesDiv, notif, rendered_notifs, selected_site, site, unreadCount, yPos, _i, _j, _k, _len, _len1, _len2, _ref;
  if (fade == null) {
    fade = 0;
  }
  if (first == null) {
    first = false;
  }
  yPos = $('#notifications').scrollTop();
  renderSiteBlocks();
  renderInfoBox();
  $('#services-box .service').click(siteClick);
  notesDiv = $('#notifications');
  notesDiv.empty();
  rendered_notifs = Array();
  group_notifs = true;
  if (root.selected_sites.length === 0) {
    rendered_notifs = root.notes;
  } else {
    for (_i = 0, _len = selected_sites.length; _i < _len; _i++) {
      selected_site = selected_sites[_i];
      rendered_notifs.merge(selected_site.notifications);
    }
    group_notifs = false;
    sortNotifications(rendered_notifs);
  }
  grouped_sites = {};
  _ref = root.sites;
  for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
    site = _ref[_j];
    grouped_sites[site.name] = false;
  }
  if (rendered_notifs !== null) {
    for (_k = 0, _len2 = rendered_notifs.length; _k < _len2; _k++) {
      notif = rendered_notifs[_k];
      if (fade === 0) {
        if (!notif.unread || !group_notifs) {
          notesDiv.append(renderNotification(notif));
        } else if (!grouped_sites[notif.site.name]) {
          if (notif.site.unread > 2) {
            notesDiv.append(renderNotification(notif, true));
            grouped_sites[notif.site.name] = true;
          } else {
            notesDiv.append(renderNotification(notif));
          }
        }
      } else {
        if (!notif.unread || !group_notifs) {
          notesDiv.append(renderNotification(notif).hide().fadeIn(fade));
        } else if (!grouped_sites[notif.site.name]) {
          if (notif.site.unread > 2) {
            notesDiv.append(renderNotification(notif, true).hide().fadeIn(fade));
            grouped_sites[notif.site.name] = true;
          } else {
            notesDiv.append(renderNotification(notif).hide().fadeIn(fade));
          }
        }
      }
    }
  }
  $('.grouped-notification-mini').click(groupClick);
  $('.notification-link').click(clickedNotification);
  $('.tooltip').remove();
  $('.close-x').tooltip({
    delay: {
      show: 100,
      hide: 0
    },
    placement: "left"
  });
  $('.bar.close-x').click(function(e) {
    var notifs, url;
    url = $(this).siblings('a').attr('href');
    notifs = root.notes.filter(function(notif) {
      return notif.url === url;
    });
    if (notifs === null) {
      return;
    }
    notif = notifs[0];
    chrome.extension.getBackgroundPage().markReadNotificaton(notif);
    e.preventDefault();
    e.stopPropagation();
  });
  unreadCount = chrome.extension.getBackgroundPage().unread;
  document.title = "" + ((unreadCount != null) && unreadCount > 0 ? "(" + unreadCount + ") - " : "") + "Chime";
  $('#notifications').scrollTop(yPos);
};

renderSiteBlocks = function() {
  var servicesDiv, site, _i, _len, _ref;
  servicesDiv = $('.all-services.sidebar');
  servicesDiv.empty();
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    servicesDiv.append(renderSiteBlock(site));
    if (site.status === SiteStatus.FINISHED) {
      if (root.selected_sites.length > 0 && $.inArray(site, root.selected_sites) === -1) {
        $("#services-box .service." + site.name).addClass('transparent-image');
      } else {
        $("#services-box .service." + site.name).removeClass('transparent-image');
      }
    }
  }
};

renderInfoBox = function() {
  var selected_site, _i, _len;
  if (root.selected_sites.length === 0) {
    if ($('#filter-box').is(":visible")) {
      $('#notifications-box').css("top", parseInt($('#notifications-box').css("top")) - $('#filter-box').height() - 1);
      return $('#filter-box').hide();
    }
  } else {
    $('#filter-box .services').text("");
    for (_i = 0, _len = selected_sites.length; _i < _len; _i++) {
      selected_site = selected_sites[_i];
      if ($('#filter-box .services').text().indexOf(selected_site.name) < 0) {
        $('#filter-box .services').append(renderServiceText(selected_site.name));
      }
    }
    if ($('#filter-box').is(":hidden")) {
      $('#filter-box').show();
      return $('#notifications-box').css("top", parseInt($('#notifications-box').css("top")) + $('#filter-box').height() + 1);
    }
  }
};

groupClick = function(e) {
  var site, sitename;
  sitename = $(this).attr('datasite');
  site = findSite(sitename);
  root.selected_sites = [site];
  track('click_group', site.name);
  return refreshView(200);
};

clearFilter = function(e) {
  root.selected_sites = [];
  track('click_clear', '');
  return refreshView();
};

findSite = function(site_name) {
  var result, site, _i, _len, _ref;
  result = null;
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    if (site !== null && site.name === site_name) {
      result = site;
      break;
    }
  }
  return result;
};

siteClick = function(e) {
  var found_site, service_classes, service_name, site;
  service_classes = $(this).attr('class').split(' ');
  service_name = service_classes[1];
  found_site = findSite(service_name);
  assert(found_site !== null, "Clicked a site that doesn't exist..");
  if (found_site.status === SiteStatus.LOGGED_OUT) {
    window.open(found_site.loginurl);
  } else if (found_site.status === SiteStatus.NEED_AUTH) {
    console.log("starting auth");
    found_site.init_oauth(function() {
      console.log("authorized!");
    });
    return;
  }
  track('click_filter', found_site.name);
  root.selected_sites = (function() {
    var _i, _len, _ref, _results;
    _ref = root.selected_sites;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      site = _ref[_i];
      if (site.status === SiteStatus.FINISHED) {
        _results.push(site);
      }
    }
    return _results;
  })();
  if (found_site.status !== SiteStatus.FINISHED) {
    return;
  }
  if ($.inArray(found_site, root.selected_sites) === -1) {
    root.selected_sites.push(found_site);
  } else {
    root.selected_sites.remove(found_site);
  }
  return refreshView(200);
};

/*
saveSettings = (e) ->
	checked = $('#option-show_desktop_notifications').is(':checked')
	checked_sites = {}
	for site in root.master_sites
		checked_sites[site.name] = $("#option-show_notifications-#{site.name}").is(':checked')
	chrome.extension.getBackgroundPage().settingsSetNotifs checked
	chrome.extension.getBackgroundPage().settingsSetSiteNotifs checked_sites
	root.sites = chrome.extension.getBackgroundPage().sites
	refreshView()
	return
*/


setupTutorial = function() {
  $('#setupModal').modal({
    backdrop: false,
    show: true
  });
  $('#popupModal').modal({
    backdrop: false,
    show: false
  });
  renderSetupModal($('.all-services.setup'), true);
  $('.service').click(function(e) {
    var elem, site_name;
    elem = $(this);
    site_name = elem.attr('datasite');
    if (elem.hasClass('selected')) {
      elem.removeClass('selected');
      return chrome.extension.getBackgroundPage().removeSite(site_name);
    } else {
      elem.addClass('selected');
      return chrome.extension.getBackgroundPage().addSite(site_name);
    }
  });
  $('#setup-next').click(function() {
    $('#popupModal').modal('show');
    return $('.frame.overlay').hide();
  });
};

refreshSettings = function() {
  $('.all-services.settings').empty();
  renderSetupModal($('.all-services.settings'), false);
  $('#option-show_desktop_notifications').prop("checked", chrome.extension.getBackgroundPage().Settings.SHOW_NOTIFS);
  $('.service').click(function(e) {
    var elem, site_name;
    elem = $(this);
    site_name = elem.attr('datasite');
    if (elem.hasClass('selected')) {
      elem.removeClass('selected');
      return chrome.extension.getBackgroundPage().removeSite(site_name);
    } else {
      elem.addClass('selected');
      return chrome.extension.getBackgroundPage().addSite(site_name);
    }
  });
};

setupSettings = function() {
  var settings;
  settings = getURLParameter('settings') === 'true';
  $('#settingsModal').modal({
    backdrop: false,
    show: settings
  });
  if (settings) {
    refreshSettings();
  }
  $("#option-show_desktop_notifications").click(function(e) {
    var checked;
    checked = $(this).is(':checked');
    chrome.extension.getBackgroundPage().settingsSetNotifs(checked);
  });
  $('#settingsModal').on('show', function() {
    return refreshSettings();
  });
};

window.refreshView = refreshView;

$(function() {
  var notes, notesDiv, scrollDiv, scrollbarWidth, sites, tutorial;
  initGA('pinnedtab');
  notesDiv = $('#notifications');
  document.title = "Chime";
  $('.header').click(function() {
    $('#notifications').scrollTop(0);
    return clearFilter(null);
  });
  $('#filter-box').click(clearFilter);
  sites = root.sites;
  notes = root.notes;
  if (sites !== null) {
    refreshView(0, true);
  }
  scrollDiv = document.createElement("div");
  scrollDiv.className = "scrollbar-measure";
  document.body.appendChild(scrollDiv);
  scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  $('#notifications').css("margin-right", 0 - scrollbarWidth);
  document.body.removeChild(scrollDiv);
  tutorial = getURLParameter('tutorial') === 'true';
  $('#feedbackModal').modal({
    backdrop: false,
    show: false
  });
  $('#feedbackBtn').click(function(e) {
    var url;
    if (chrome.extension.getBackgroundPage().GmailSite.instance.status === SiteStatus.FINISHED) {
      url = "https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=support@chimeapp.com&su=%5BChime%20Feedback%5D";
      openInNewTab(url);
    } else {
      window.open("mailto:support@chimeapp.com");
    }
  });
  if (tutorial) {
    setupTutorial();
  } else {
    $('#setupModal').remove();
    $('#popupModal').remove();
    $('.frame.overlay').hide();
  }
  setupSettings();
  /*
  	$('#feedbackForm').submit (e) ->
  		console.log "feedback submitted"
  		$('#feedbackModal').modal('hide')
  		clearForm = () ->
  			$('#feedbackForm')[0].reset()
  		setTimeout clearForm, 1000
  		return
  */

});
