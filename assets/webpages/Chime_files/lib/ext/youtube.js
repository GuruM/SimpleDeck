// Generated by CoffeeScript 1.6.3
var YoutubeNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

YoutubeNotification = (function(_super) {
  __extends(YoutubeNotification, _super);

  function YoutubeNotification(description, url, time, unread) {
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    this.body = "<span class='important'>" + description['message'] + "</span><span class='unimportant'> from: " + description['user'] + "</span>";
    this.time = null;
    this.url = url;
    this.unread = unread;
    this.site = YoutubeSite.instance;
    YoutubeNotification.__super__.constructor.call(this);
  }

  return YoutubeNotification;

})(Notification);

this.YoutubeSite = (function(_super) {
  __extends(YoutubeSite, _super);

  YoutubeSite.instance = null;

  YoutubeSite.prototype.last_unread_count = -1;

  function YoutubeSite() {
    this.name = "youtube";
    this.domain = "m.youtube.com";
    this.cookiedomain = '.youtube.com';
    this.loginurl = "https://accounts.google.com/ServiceLogin?service=youtube&continue=http://www.youtube.com";
    this.callbackurl = ["http://m.youtube.com/inbox"];
    this.testurl = null;
    this.jsonurl = null;
    this.option_feed_type = FeedType.XHTTP;
    YoutubeSite.__super__.constructor.apply(this, arguments);
    YoutubeSite.instance = this;
  }

  YoutubeSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: 'HSID',
      cause: ['explicit', 'expired_overwrite']
    };
    YoutubeSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  YoutubeSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details;
    cookie_details = {
      url: 'http://www.youtube.com',
      name: 'HSID'
    };
    return YoutubeSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc);
  };

  YoutubeSite.prototype.parse = function(body_element) {
    var elements, err, notifications, responsestatus, self_notifications;
    notifications = new Array();
    self_notifications = 0;
    console.log(body_element);
    try {
      elements = body_element.find('body div:eq(4) div[style="color:#999;font-size:80%"]');
      console.log(elements);
      elements.each(function(i, htmlelement) {
        var date, description, element, message, unread, url, user;
        element = $(htmlelement);
        user = $.trim((element.html().split('<br>')[0]).split(':')[1]);
        if (element.has('b').html() === null) {
          unread = false;
        } else {
          unread = true;
        }
        url = 'http://youtube.com' + element.find('a').attr('href');
        message = element.find('a').text();
        description = {
          user: user,
          message: message
        };
        date = null;
        return notifications.push(new YoutubeNotification(description, url, date, unread));
      });
      responsestatus = LoadStatusCodes.OK;
    } catch (_error) {
      err = _error;
      console.log(err);
      responsestatus = LoadStatusCodes.ERROR;
    }
    return [responsestatus, notifications];
  };

  YoutubeSite.prototype.merge_notifications = function(new_notifs) {
    var notif, notifs, size;
    size = new_notifs;
    notifs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
        notif = new_notifs[_i];
        _results.push(new YoutubeNotification(notif.description, notif.url, new Date(notif.time), notif.unread));
      }
      return _results;
    })();
    return YoutubeSite.__super__.merge_notifications.call(this, notifs);
  };

  return YoutubeSite;

})(Site);
