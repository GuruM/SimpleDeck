// Generated by CoffeeScript 1.6.3
var GithubNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GithubNotification = (function(_super) {
  __extends(GithubNotification, _super);

  function GithubNotification(description, url, time, unread, id) {
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    this.id = id;
    this.body = "<span class='important'>" + description['repo'] + ":</span> <span class='unimportant'>" + description['subject'] + "</span>";
    this.time = time;
    this.url = url;
    this.unread = unread;
    this.site = GithubSite.instance;
    this.id = id;
    this.title = description['repo'];
    this.message_body = description['subject'];
    this.icon_name = "icon.github.png";
    GithubNotification.__super__.constructor.call(this);
  }

  GithubNotification.prototype.markAsRead = function(read) {
    GithubNotification.__super__.markAsRead.call(this, read);
    $.get(this.url, null);
  };

  return GithubNotification;

})(Notification);

this.GithubSite = (function(_super) {
  __extends(GithubSite, _super);

  GithubSite.instance = null;

  GithubSite.prototype.last_unread_count = -1;

  function GithubSite() {
    this.name = "github";
    this.notif_description = ["notifications"];
    this.domain = "github.com";
    this.cookiedomain = this.domain;
    this.loginurl = "http://www.github.com/login";
    this.callbackurl = ["https://github.com/notifications?all=1"];
    this.testurl = null;
    this.jsonurl = null;
    this.option_feed_type = FeedType.XHTTP;
    this.option_mark_read = true;
    GithubSite.__super__.constructor.apply(this, arguments);
    GithubSite.instance = this;
  }

  GithubSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: '_gh_sess',
      cause: ['explicit']
    };
    return GithubSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  GithubSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details, pattern;
    cookie_details = {
      url: 'https://github.com',
      name: 'logged_in'
    };
    pattern = /yes/;
    return GithubSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc, pattern);
  };

  GithubSite.prototype.parse = function(body) {
    var err, matchindex, notifications, responsestatus;
    notifications = new Array();
    try {
      matchindex = $(body)[5].childNodes[0].data.search(/Notifications/);
      if (matchindex === -1) {
        return [LoadStatusCodes.UNAUTHORIZED, notifications];
      }
      body.find('.js-notification').each(function(i, htmlelement) {
        var date, description, element, httpindex, id, repo_name, titletxt, unread, url, urlprefix;
        element = $(htmlelement);
        id = element.attr('data-note-id');
        unread = element.hasClass('unread') ? true : false;
        date = element.find('time').attr('datetime');
        titletxt = $.trim(element.find('.js-notification-target').text());
        url = element.find('.js-notification-target').attr('href');
        urlprefix = 'https://github.com';
        httpindex = url.search(/http/);
        if (httpindex === -1) {
          url = urlprefix + url;
        }
        repo_name = url.split(/\//)[3] + "/" + url.split(/\//)[4];
        description = {
          'subject': titletxt,
          'repo': repo_name
        };
        return notifications.push(new GithubNotification(description, url, date, unread, id));
      });
      responsestatus = LoadStatusCodes.OK;
    } catch (_error) {
      err = _error;
      console.log(err);
      responsestatus = LoadStatusCodes.ERROR;
    }
    return [responsestatus, notifications];
  };

  GithubSite.prototype.merge_notifications = function(new_notifs) {
    var notif, notifs, size;
    size = new_notifs;
    notifs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
        notif = new_notifs[_i];
        _results.push(new GithubNotification(notif.description, notif.url, new Date(notif.time), notif.unread, notif.id));
      }
      return _results;
    })();
    return GithubSite.__super__.merge_notifications.call(this, notifs);
  };

  return GithubSite;

})(Site);
