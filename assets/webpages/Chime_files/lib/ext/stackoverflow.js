// Generated by CoffeeScript 1.6.3
var StackoverflowNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

StackoverflowNotification = (function(_super) {
  __extends(StackoverflowNotification, _super);

  function StackoverflowNotification(description, url, time, unread) {
    var summary, text, title, type;
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    type = description['type'];
    if (type === 'notification') {
      text = description['text'];
      this.body = "<span class='unimportant'>" + text + "</span>";
      this.title = text;
    } else {
      title = description['title'];
      summary = description['summary'];
      this.body = "<span class='important'>" + title + ": </span><span class='unimportant'>" + summary + "</span>";
      this.title = title;
      this.message_body = summary;
    }
    this.icon_name = "icon.stackoverflow.png";
    this.time = time;
    this.url = url;
    this.unread = unread;
    this.site = StackoverflowSite.instance;
    StackoverflowNotification.__super__.constructor.call(this);
  }

  StackoverflowNotification.prototype.markAsRead = function(read) {
    StackoverflowNotification.__super__.markAsRead.call(this, read);
    $.get(this.url, null);
  };

  return StackoverflowNotification;

})(Notification);

this.StackoverflowSite = (function(_super) {
  __extends(StackoverflowSite, _super);

  StackoverflowSite.instance = null;

  StackoverflowSite.prototype.last_unread_count = -1;

  function StackoverflowSite() {
    this.name = "stackoverflow";
    this.notif_description = ["notifications"];
    this.domain = "www.stackoverflow.com";
    this.cookiedomain = ".stackoverflow.com";
    this.loginurl = "http://stackoverflow.com/users/login";
    this.callbackurl = ["http://stackoverflow.com/notices/genuwine", "http://stackoverflow.com/inbox/genuwine"];
    this.option_feed_type = FeedType.JSON;
    this.option_mark_read = true;
    StackoverflowSite.__super__.constructor.apply(this, arguments);
    StackoverflowSite.instance = this;
  }

  StackoverflowSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: 'usr',
      cause: ['explicit', 'expired_overwrite']
    };
    StackoverflowSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  StackoverflowSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details;
    cookie_details = {
      url: 'http://stackoverflow.com',
      name: 'usr'
    };
    return StackoverflowSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc);
  };

  StackoverflowSite.prototype.parse = function(jsonobj) {
    var notif, notifications, parseInbox, parseNotification, responsestatus, type, _i, _j, _len, _len1;
    parseNotification = function(jsonobj) {
      var date, description, element, text, unread, url;
      unread = jsonobj.is_unread;
      date = jsonobj.created;
      if ((date.search(/hours ago/)) !== -1) {
        date = '-' + date.replace('ago', '');
        console.log('if-branch: ', date);
      }
      date = Date.parse(date);
      element = $('<div>' + jsonobj.text + '</div>');
      url = element.find('a:nth-child(2)').attr('href');
      if (url == null) {
        url = element.find('a').attr('href');
      }
      text = element.text();
      description = {
        text: text,
        type: 'notification'
      };
      return new StackoverflowNotification(description, url, date, unread);
    };
    parseInbox = function(jsonobj) {
      var date, description, summary, title, unread, url;
      unread = jsonobj.IsNew;
      url = jsonobj.Url;
      date = jsonobj.CreationDate;
      if ((date.search(/hours ago/)) !== -1) {
        date = '-' + date.replace('ago', '');
      }
      date = Date.parse(date);
      title = jsonobj.Title;
      summary = jsonobj.Summary;
      description = {
        title: title,
        summary: summary,
        type: 'inbox'
      };
      return new StackoverflowNotification(description, url, date, unread);
    };
    if (jsonobj.length > 0 && jsonobj[0].Title === void 0) {
      type = 'notification';
    } else {
      type = 'inbox';
    }
    notifications = new Array();
    if (jsonobj === null) {
      responsestatus = LoadStatusCodes.UNAUTHORIZED;
    } else if (type === 'notification') {
      for (_i = 0, _len = jsonobj.length; _i < _len; _i++) {
        notif = jsonobj[_i];
        notifications.push(parseNotification(notif));
      }
      responsestatus = LoadStatusCodes.OK;
    } else {
      for (_j = 0, _len1 = jsonobj.length; _j < _len1; _j++) {
        notif = jsonobj[_j];
        notifications.push(parseInbox(notif));
      }
      responsestatus = LoadStatusCodes.OK;
    }
    return [responsestatus, notifications];
  };

  return StackoverflowSite;

})(Site);
