// Generated by CoffeeScript 1.6.3
var LinkedinNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LinkedinNotification = (function(_super) {
  __extends(LinkedinNotification, _super);

  function LinkedinNotification(description, url, time, unread) {
    var from, type;
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    type = description['type'];
    if (type === 'invitation') {
      this.body = "<span class='important'>Invitation from " + description['from'] + "</span><span class='unimportant'> | " + description['from_headline'];
      this.time = null;
    } else {
      from = description['from'];
      this.body = "<span class='important'>" + description['subject'] + "</span>";
      if ((from != null) && from !== "") {
        this.body += "<span class='unimportant'> from " + from + "</span>";
      }
      this.time = this.time;
    }
    this.url = url;
    this.unread = unread;
    this.site = LinkedinSite.instance;
    LinkedinNotification.__super__.constructor.call(this);
  }

  LinkedinNotification.prototype.updateAttr = function(newattr) {
    LinkedinNotification.__super__.updateAttr.call(this, newattr);
  };

  return LinkedinNotification;

})(Notification);

this.LinkedinSite = (function(_super) {
  __extends(LinkedinSite, _super);

  LinkedinSite.instance = null;

  LinkedinSite.prototype.last_unread_count = -1;

  function LinkedinSite() {
    this.name = "linkedin";
    this.notif_description = ["notifications", "invitations"];
    this.domain = "www.linkedin.com";
    this.cookiedomain = 'www.linkedin.com';
    this.loginurl = "https://www.linkedin.com/uas/login";
    this.callbackurl = ["http://linkedin.com/inbox/messages/received", "http://linkedin.com/inbox/invitations/pending"];
    this.testurl = null;
    this.jsonurl = null;
    this.option_feed_type = FeedType.XHTTP;
    this.option_slow_check = true;
    LinkedinSite.__super__.constructor.call(this);
    LinkedinSite.instance = this;
  }

  LinkedinSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: 'leo_auth_token',
      cause: ['explicit', 'expired_overwrite']
    };
    LinkedinSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  LinkedinSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details, pattern;
    cookie_details = {
      url: 'https://www.linkedin.com',
      name: 'leo_auth_token'
    };
    pattern = /LIM/;
    return LinkedinSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc, pattern);
  };

  LinkedinSite.prototype.parse = function(body) {
    var err, inboxitems, msgitems, notifications, responsestatus, size,
      _this = this;
    notifications = null;
    try {
      size = body.find('.inbox-item').size();
      notifications = new Array(size);
      inboxitems = body.find('#invitations .inbox-item');
      inboxitems.each(function(i, htmlelement) {
        var content, date, description, element, from, from_headline, unread, url;
        element = $(htmlelement);
        content = element.find('.item-content');
        date = null;
        from = $.trim(content.find('.participants a').text());
        from_headline = $.trim(content.find('.headline').text());
        url = 'http://www.linkedin.com'.concat(content.find('.participants a').attr('href'));
        unread = true;
        description = {
          type: 'invitation',
          from: from,
          from_headline: from_headline
        };
        notifications[i] = new LinkedinNotification(description, url, date, unread);
      });
      msgitems = body.find('#messages .inbox-item');
      msgitems.each(function(i, htmlelement) {
        var content, date, description, element, from, last_date, subject, unread, url;
        element = $(htmlelement);
        content = element.find('.item-content');
        date = new Date($.trim(content.find('.date').text()));
        from = $.trim(content.find('.participants a').text());
        subject = $.trim(content.find('.subject a').text());
        url = 'http://www.linkedin.com'.concat($.trim(content.find('.subject a').attr('href')));
        unread = element.hasClass('unread') ? true : false;
        last_date = i === 0 ? new Date : notifications[i - 1].time;
        date.setFullYear(last_date.getFullYear());
        if (date > last_date) {
          date.setFullYear(last_date.getFullYear() - 1);
        }
        description = {
          type: 'message',
          date: date,
          from: from,
          subject: subject,
          unread: unread,
          url: url
        };
        notifications[i] = new LinkedinNotification(description, url, date, unread);
      });
      responsestatus = LoadStatusCodes.OK;
    } catch (_error) {
      err = _error;
      console.log(err);
      responsestatus = LoadStatusCodes.ERROR;
    }
    return [responsestatus, notifications];
  };

  return LinkedinSite;

})(Site);
