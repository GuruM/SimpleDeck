// Generated by CoffeeScript 1.6.3
var CONTEXT, clearBrandNewNotifications, clickNotif, createMainPage, displayBrandnewNotifications, hideNotificaton, listenForClear, listenForClicks, listenForCookies, markAllUnread, markReadNotificaton, muteNotifications, refreshDisplays, root, showNotif, sortAllNotifications, testSites, updateBrandNewCount, updateUnreadCount;

CONTEXT = "background";

root = typeof exports !== "undefined" && exports !== null ? exports : this;

root.master_sites = null;

root.sites = null;

/*
setter root,'a', (val) -> 
	alert "wutup"
	return
*/


setter(root, 'brandnew', function(val) {});

getter(root, 'brandnew', function() {
  var notif, result, _i, _len, _ref;
  result = 0;
  _ref = root.notes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    notif = _ref[_i];
    if (notif.attr.brandnew === true) {
      result++;
    }
  }
  return result;
});

getter(root, 'unread', function() {
  var result, site, _i, _len;
  result = 0;
  for (_i = 0, _len = sites.length; _i < _len; _i++) {
    site = sites[_i];
    if (site.status === SiteStatus.FINISHED) {
      result += site.unread;
    }
  }
  return result;
});

getter(root, 'notes', function() {
  var notifs, site, _i, _len, _ref;
  if (!root.sites) {
    return [];
  }
  notifs = new Array();
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    if (site !== null && site.status === SiteStatus.FINISHED) {
      notifs = notifs.concat(site.notifications);
    }
  }
  sortNotifications(notifs);
  return notifs;
});

initSites(this);

listenForClicks = function() {
  return chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {
    var found_notif, notif, _i, _len, _ref;
    console.log("listening");
    console.log(request.msgtype);
    if (request.msgtype === "errormsg") {
      console.log(request.msg);
      return;
    }
    if (request.msgtype !== "clickednotif" && request.msgtype !== "marknotif" && request.msgtype !== "hidenotif") {
      return;
    }
    assert(request.url !== null, "Clicked on a null URL");
    found_notif = null;
    _ref = root.notes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      notif = _ref[_i];
      if (notif.url === request.url) {
        found_notif = notif;
      }
    }
    assert(found_notif !== null, "Could not find a notification like this");
    if (request.msgtype === "clickednotif") {
      console.log("found click");
      clickNotif(found_notif);
    } else if (request.msgtype === "marknotif") {
      found_notif.markAsRead(true);
    } else if (request.msgtype === "hidenotif") {
      found_notif.hide();
    }
    refreshDisplays();
    sendResponse({});
  });
};

markAllUnread = function(site_name) {
  var notif, notifs, site, _i, _len;
  site = findMasterSite(site_name);
  notifs = site.notifications;
  for (_i = 0, _len = notifs.length; _i < _len; _i++) {
    notif = notifs[_i];
    if (site !== GmailSite.instance) {
      notif.markAsRead();
    } else {
      notif.hide();
    }
  }
  refreshDisplays();
};

updateUnreadCount = function() {
  var unmarked, unmarked_notifs;
  unmarked_notifs = root.notes.filter(function(notif) {
    return notif.unread === true && notif.attr.marked === false;
  });
  unmarked = unmarked_notifs.length;
  if (unmarked === 0) {
    chrome.browserAction.setBadgeText({
      text: ''
    });
  } else {
    chrome.browserAction.setBadgeText({
      text: String(unmarked)
    });
  }
};

clickNotif = function(notif) {
  var sitesThatDontUpdateUnread;
  sitesThatDontUpdateUnread = ['quora', 'linkedin', 'youtube'];
  track('click_notif', notif.site.name);
  if (notif.click()) {
    updateUnreadCount(-1);
    refreshDisplays();
  }
};

displayBrandnewNotifications = function() {
  var count, display_notif, notif, _i, _len, _ref;
  count = 0;
  display_notif = null;
  _ref = root.notes;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    notif = _ref[_i];
    if (notif.attr.brandnew === true && notif.attr.marked === false && notif.unread === true) {
      count++;
      if (count === 1) {
        display_notif = notif;
      }
    }
  }
  if (display_notif !== null) {
    showNotif(display_notif);
  }
  clearBrandNewNotifications();
};

showNotif = function(notif) {
  var body, cancel_notif, error, is_HTML_supported, is_rich_supported, notif_alert, notif_id, timeout_var, title;
  assert(notif !== null, "tried to display a null notification");
  title = notif.title.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  body = notif.message_body.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  is_HTML_supported = false;
  is_rich_supported = false;
  try {
    console.log("trying HTML");
    notif_alert = webkitNotifications.createHTMLNotification("notification.html?h=" + notif.hash);
    is_HTML_supported = true;
  } catch (_error) {
    error = _error;
    console.log("HTML failed");
  }
  if (!is_HTML_supported) {
    try {
      console.log("trying rich");
      notif_id = "id-" + notif.hash;
      chrome.notifications.create(notif_id, {
        type: "basic",
        iconUrl: "/images/sites/" + notif.icon_name,
        title: title,
        message: body,
        buttons: [
          {
            title: 'Mark as read',
            iconUrl: '/images/icon-ok-2.png'
          }
        ],
        priority: 0
      }, function() {});
      is_rich_supported = true;
      chrome.notifications.onClicked.addListener(function(notif_id) {
        $(this).target = "_blank";
        return window.open(notif.url);
      });
      chrome.notifications.onButtonClicked.addListener(function(notif_id, buttonIndex) {
        console.log("button clicked: " + buttonIndex);
        if (buttonIndex === 0) {
          console.log("yes!");
          return chrome.extension.getBackgroundPage().markReadNotificaton(notif);
        }
      });
    } catch (_error) {
      error = _error;
      console.log("rich failed");
      is_rich_supported = false;
      notif_alert = webkitNotifications.createNotification("/images/sites/" + notif.icon_name, title, body);
    }
  }
  timeout_var = null;
  cancel_notif = function(event) {
    if (is_HTML_supported) {
      if (timeout_var !== null) {
        clearTimeout(timeout_var);
      }
      event.currentTarget.cancel();
    }
  };
  if (!is_rich_supported) {
    notif_alert.show();
    notif_alert.ondisplay = function(event) {
      if (is_HTML_supported) {
        timeout_var = setTimeout(cancel_notif, 15000, event);
      }
    };
    notif_alert.onclick = function(event) {
      if (is_HTML_supported) {
        clearTimeout(timeout_var);
      } else {
        event.preventDefault();
        clickNotif(notif);
      }
    };
    notif_alert.onclose = function(event) {
      if (is_HTML_supported) {
        clearTimeout(timeout_var);
      }
    };
  }
};

sortAllNotifications = function() {};

refreshDisplays = function() {
  sortAllNotifications();
  updateUnreadCount();
  chrome.extension.sendRequest({
    msgtype: "refresh"
  });
  saveNotifs();
};

listenForClear = function() {
  return chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {
    if (request.msgtype !== "clearbrandnew") {
      return;
    }
    return root.brandnew = 0;
  });
};

updateBrandNewCount = function(amount) {
  assert(amount !== null, "Got a brand new amount that is null.");
};

testSites = function() {
  var remaining, site, _i, _len, _ref;
  milestone("Testing Sites");
  remaining = root.sites.length;
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    if (site.testurl !== null) {
      (function(site) {
        milestone("Testing: " + site.name);
        loadURL(site.testurl, site.domain, function(request) {
          if (request.status !== SiteStatus.HAD_ERROR) {
            milestone("Test Passed: " + site.name);
          } else {
            throw_assert("Test Failed " + site.name + ": " + request.msg);
            site.status = SiteStatus.HAD_ERROR;
          }
          return;
          return remaining--;
        });
      })(site);
    }
  }
};

createMainPage = function(tutorial, settings) {
  if (tutorial == null) {
    tutorial = false;
  }
  if (settings == null) {
    settings = false;
  }
  chrome.tabs.create({
    url: "newtab.html?tutorial=" + tutorial + "&settings=" + settings,
    pinned: false,
    windowId: window.id,
    active: true
  }, null);
};

listenForCookies = function() {
  return chrome.cookies.onChanged.addListener(function(changeInfo) {
    var site, _i, _len, _ref, _results;
    _ref = root.sites;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      site = _ref[_i];
      if (site.cookiedomain === changeInfo.cookie.domain) {
        _results.push(site.checkCookie(changeInfo));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  });
};

clearBrandNewNotifications = function() {
  var new_notifs, notif, _i, _len;
  new_notifs = root.notes.filter(function(notif) {
    return notif.attr.brandnew === true;
  });
  for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
    notif = new_notifs[_i];
    notif.attr.brandnew = false;
  }
};

hideNotificaton = function(notif) {
  notif.hide();
  refreshDisplays();
};

markReadNotificaton = function(notif) {
  notif.markRead();
  refreshDisplays();
};

muteNotifications = function(mute) {
  if (mute) {
    chrome.browserAction.setIcon({
      path: "/images/icon.19.png"
    });
    chrome.browserAction.setBadgeBackgroundColor({
      color: [0, 0, 0, 0]
    });
  } else {
    chrome.browserAction.setIcon({
      path: "/images/icon.19.grey.png"
    });
    chrome.browserAction.setBadgeBackgroundColor({
      color: "#936262"
    });
  }
  settingsSetNotifs(mute);
};

chrome.runtime.onInstalled.addListener(function(details) {
  if (details.reason !== "chrome_update") {
    track('install', details.reason);
  }
  if (details.reason === "install") {
    createMainPage(true, false);
  } else if (details.reason === "update") {
    createMainPage(false, false);
  }
});

$(document).ready(function() {
  var found_site, found_site_real, muted, site, _i, _len, _ref;
  initGA('bgpage');
  if (localStorage['settings_show_notifs']) {
    Settings.SHOW_NOTIFS = localStorage['settings_show_notifs'] === 'true';
  }
  muted = Settings.SHOW_NOTIFS;
  muteNotifications(muted);
  _ref = root.master_sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    if (localStorage["settings_show_" + site.name + "_notifs"]) {
      Settings.SHOW_SPECIFIC_NOTIFS[site.name] = localStorage["settings_show_" + site.name + "_notifs"] === 'true';
    }
    found_site_real = findSite(site.name);
    root.sites.remove(found_site_real);
    if (Settings.SHOW_SPECIFIC_NOTIFS[site.name]) {
      found_site = findMasterSite(site.name);
      console.log("" + site.name + " added");
      found_site.priority = 0;
      root.sites.push(found_site);
    } else {
      console.log("" + site.name + " removed");
    }
  }
  milestone("Loaded Background Page");
  listenForClicks();
  listenForClear();
  listenForCookies();
  loadNotifs();
  return initScheduler();
});
