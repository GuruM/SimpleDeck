// Generated by CoffeeScript 1.6.3
var FlickrNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

FlickrNotification = (function(_super) {
  __extends(FlickrNotification, _super);

  function FlickrNotification(description, url, time, unread) {
    var from, subject;
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    subject = description['subject'];
    from = description['from'];
    this.body = "<span class='important'>" + from + ": </span><span class='unimportant'>" + subject + "</span>";
    this.time = time;
    this.url = url;
    this.unread = unread;
    this.site = FlickrSite.instance;
    this.title = from;
    this.message_body = subject;
    this.icon_name = "icon.flickr.png";
    FlickrNotification.__super__.constructor.call(this);
  }

  return FlickrNotification;

})(Notification);

this.FlickrSite = (function(_super) {
  __extends(FlickrSite, _super);

  FlickrSite.instance = null;

  FlickrSite.prototype.last_unread_count = -1;

  function FlickrSite() {
    this.name = "flickr";
    this.notif_description = ["mail"];
    this.domain = "www.flickr.com";
    this.cookiedomain = '.flickr.com';
    this.loginurl = "http://www.flickr.com/signin/flickr/";
    this.callbackurl = ["http://www.flickr.com/mail/"];
    this.testurl = null;
    this.jsonurl = null;
    this.option_feed_type = FeedType.XHTTP;
    FlickrSite.__super__.constructor.apply(this, arguments);
    FlickrSite.instance = this;
  }

  FlickrSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: 'cookie_session',
      cause: ['explicit', 'expired_overwrite']
    };
    FlickrSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  FlickrSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details;
    cookie_details = {
      url: 'http://www.flickr.com',
      name: 'cookie_session'
    };
    return FlickrSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc);
  };

  FlickrSite.prototype.parse = function(body_element) {
    var err, msgs, notifications, responsestatus,
      _this = this;
    notifications = new Array();
    try {
      msgs = body_element.find('.message_row');
      msgs.each(function(i, htmlelement) {
        var date, description, element, from, msg_header, subject, unread, url;
        element = $(htmlelement);
        msg_header = element.find('.subj a');
        subject = msg_header.text();
        from = element.find('.fromto').text();
        date = Date.parse(element.find('.date').text().replace('.', ':'));
        if (isNaN(date)) {
          date = null;
        }
        url = 'http://www.flickr.com' + msg_header.attr('href');
        unread = element.hasClass('unread');
        description = {
          subject: subject,
          from: from
        };
        notifications.push(new FlickrNotification(description, url, date, unread));
      });
      responsestatus = LoadStatusCodes.OK;
    } catch (_error) {
      err = _error;
      console.log(err);
      responsestatus = LoadStatusCodes.ERROR;
    }
    return [responsestatus, notifications];
  };

  FlickrSite.prototype.merge_notifications = function(new_notifs) {
    var notif, notifs;
    notifs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
        notif = new_notifs[_i];
        _results.push(new FlickrNotification(notif.description, notif.url, new Date(notif.time), notif.unread));
      }
      return _results;
    })();
    return FlickrSite.__super__.merge_notifications.call(this, notifs);
  };

  return FlickrSite;

})(Site);
