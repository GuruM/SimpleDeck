// Generated by CoffeeScript 1.6.3
var GmailNotification,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GmailNotification = (function(_super) {
  __extends(GmailNotification, _super);

  function GmailNotification(description, url, time, unread) {
    var email, label, name, title;
    this.description = description;
    this.url = url;
    this.time = time;
    this.unread = unread;
    title = this.description['title'];
    name = this.description['name'];
    label = this.description['label'];
    email = this.description['email'];
    this.body = "</i></span><span class='important'> " + name + ":</span> <span class='unimportant'>" + title + "</span>";
    if (label !== null) {
      this.body += " <span class='label'>[" + label + "]</span>";
    }
    this.site = GmailSite.instance;
    this.message_id = this.url.match(/[0-9a-z]*$/i);
    this.url = url;
    this.email = email;
    this.title = "" + name;
    if (label !== null) {
      this.title += " [" + label + "]";
    }
    this.message_body = title;
    this.icon_name = "icon.gmail.png";
    if (!checkDate(time)) {
      this.time = null;
    }
    GmailNotification.__super__.constructor.call(this);
  }

  GmailNotification.prototype.markAsRead = function(read) {
    var mark_as_read_url, primary_account, search_index;
    GmailNotification.__super__.markAsRead.call(this, read);
    search_index = this.url.search(/u\/0/);
    if (search_index === -1) {
      primary_account = false;
    } else {
      primary_account = true;
    }
    if (primary_account) {
      mark_as_read_url = "https://mail.google.com/mail/?ui=html&zy=h";
    } else {
      mark_as_read_url = "https://mail.google.com/mail/u/1/h/?";
    }
    mark_as_read_url += "&v=c&th=" + this.message_id;
    $.get(mark_as_read_url, null);
  };

  return GmailNotification;

})(Notification);

this.GmailSite = (function(_super) {
  __extends(GmailSite, _super);

  GmailSite.instance = null;

  GmailSite.prototype.last_unread_count = -1;

  GmailSite.prototype._last_open_tab_id = -1;

  function GmailSite() {
    this.name = "gmail";
    this.notif_description = ["emails"];
    this.domain = "mail.google.com";
    this.cookiedomain = '.google.com';
    this.loginurl = "https://accounts.google.com/ServiceLogin?service=mail&continue=https://mail.google.com/mail/";
    this.callbackurl = ["https://mail.google.com/mail/u/1/?ui=html&zy=h", "https://mail.google.com/mail/?ui=html&zy=h"];
    this.testurl = chrome.extension.getURL("test/sites/gmail.html");
    this.xmlurl = "https://mail.google.com/mail/feed/atom";
    this.option_quick_check = true;
    this.option_feed_type = FeedType.XHTTP;
    this.option_mark_read = true;
    this.last_modified_time = null;
    GmailSite.__super__.constructor.call(this);
    GmailSite.instance = this;
  }

  GmailSite.prototype.checkCookie = function(changeInfo) {
    var cookiematch;
    cookiematch = {
      name: 'HSID',
      cause: ['explicit', 'expired_overwrite']
    };
    GmailSite.__super__.checkCookie.call(this, cookiematch, changeInfo);
  };

  GmailSite.prototype.checkLoggedIn = function(callbackfunc) {
    var cookie_details;
    cookie_details = {
      url: 'https://mail.google.com/mail/?ui=html&zy=h',
      name: 'HSID'
    };
    return GmailSite.__super__.checkLoggedIn.call(this, cookie_details, callbackfunc);
  };

  /*
  	checkForNew: (callbackfunc) ->
  
  		site = @
  		url = @xmlurl
  
  		#be sure to reset count on a timeout or error
  		loadXML url, (rootobj,loadstatus,loadmessage=null) ->
  			try
  				switch loadstatus
  					when LoadStatusCodes.OK
  						unread_count = parseInt(rootobj.find('fullcount').text())
  						modified_time = rootobj.find('modified').text()
  						assert(unread_count != null,"Did not parse unread count correctly")
  						if unread_count != site.last_unread_count
  							site.last_unread_count = unread_count
  							responsestatus = LoadStatusCodes.OK
  						else if modified_time != site.last_modified_time			
  							site.last_modified_time = modified_time
  							responsestatus = LoadStatusCodes.OK
  						else
  							responsestatus = LoadStatusCodes.NO_NEW
  					when LoadStatusCodes.UNAUTHORIZED
  						@_last_unread_count = -1
  						responsestatus = LoadStatusCodes.UNAUTHORIZED
  					else
  						@_last_unread_count = -1
  						responsestatus = loadstatus
  			catch err
  				console.log "Gmail had error #{err}"
  				responsestatus = LoadStatusCodes.ERROR
  			
  			callbackfunc(site,responsestatus)
  
  		return
  */


  GmailSite.prototype.parse = function(body_element) {
    var baseurl, elements, email, err, notifications, responsestatus, unreadelements,
      _this = this;
    notifications = new Array();
    try {
      email = body_element.find('nobr b[class="gb4"]').text();
      baseurl = body_element.find('td[id="bm"] a').attr('href');
      elements = body_element.find('tr[bgcolor="#E8EEF7"]');
      unreadelements = body_element.find('tr[bgcolor="#ffffff"]');
      elements = elements.add(unreadelements);
      elements.each(function(i, htmlelement) {
        var bodyelement, date, datetxt, description, e, element, inbox_num, labeltxt, message_id, nametxt, rawurl, titletxt, unread, url, urlprefix;
        element = $(htmlelement);
        unread = element.attr('bgcolor') === "#ffffff";
        nametxt = element.children(':nth-child(2)').text();
        datetxt = $.trim(element.children(':last').text());
        date = Date.parse(datetxt);
        if (datetxt.search(/pm/) !== -1 && date > Date.parse('now')) {
          date = Date.parse(date).add(-1).days();
        }
        if (isNaN(date)) {
          date = null;
        }
        if (date > Date.parse('now')) {
          date = null;
        }
        bodyelement = element.children(':nth-child(3)');
        rawurl = bodyelement.find('a').attr('href');
        message_id = rawurl.match(/[0-9a-z]*$/i);
        try {
          inbox_num = (baseurl.match(/u\/[0-9]/))[0].replace('u/', '');
        } catch (_error) {
          e = _error;
          inbox_num = '0';
        }
        urlprefix = "https://mail.google.com/mail/u/" + inbox_num + "/#inbox/";
        url = urlprefix + message_id;
        if (!unread) {
          titletxt = bodyelement.find('.ts').justtext('').text();
        } else {
          titletxt = bodyelement.find('.ts b').text();
        }
        labeltxt = $.trim(bodyelement.find('.ts font font').text());
        if (labeltxt === '') {
          labeltxt = null;
        }
        description = {
          email: email,
          name: nametxt,
          title: titletxt,
          label: labeltxt
        };
        notifications.push(new GmailNotification(description, url, date, unread));
      });
      responsestatus = LoadStatusCodes.OK;
    } catch (_error) {
      err = _error;
      console.log(err);
      responsestatus = LoadStatusCodes.ERROR;
    }
    return [responsestatus, notifications];
  };

  GmailSite.prototype.merge_notifications = function(new_notifs) {
    var notif, notifs;
    notifs = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = new_notifs.length; _i < _len; _i++) {
        notif = new_notifs[_i];
        _results.push(new GmailNotification(notif.description, notif.url, new Date(notif.time), notif.unread));
      }
      return _results;
    })();
    return GmailSite.__super__.merge_notifications.call(this, notifs);
  };

  return GmailSite;

})(Site);
