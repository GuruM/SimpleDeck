// Generated by CoffeeScript 1.6.3
/*
chromeutils.coffee
Consists mainly of the functions that call the Chrome API
*/

var blockImages, headersIntercept, imageHandler, loadGET, loadJSON, loadOauth, loadURL, loadXHTTP, loadXML;

loadJSON = function(url, callbackfunc) {
  return loadGET(url, "text json", function(jqXHR, loadstatus, loadmessage) {
    var err, jsonObj;
    if (loadmessage == null) {
      loadmessage = null;
    }
    try {
      if (loadstatus === LoadStatusCodes.OK) {
        jsonObj = jQuery.parseJSON(jqXHR.responseText);
        return callbackfunc(jsonObj, loadstatus);
      } else {
        return callbackfunc(null, loadstatus, loadmessage);
      }
    } catch (_error) {
      err = _error;
      return callbackfunc(null, LoadStatusCodes.ERROR, err.message);
    }
  });
};

loadXML = function(url, callbackfunc) {
  return loadGET(url, "text xml", function(jqXHR, loadstatus, loadmessage) {
    var err, parsedFeed, parser;
    if (loadmessage == null) {
      loadmessage = null;
    }
    try {
      if (loadstatus === LoadStatusCodes.OK) {
        parser = new DOMParser();
        parsedFeed = $(parser.parseFromString(jqXHR.responseText, "text/xml"));
        return callbackfunc(parsedFeed, LoadStatusCodes.OK);
      } else {
        return callbackfunc(null, loadstatus, loadmessage);
      }
    } catch (_error) {
      err = _error;
      return callbackfunc(null, LoadStatusCodes.ERROR, err.message);
    }
  });
};

loadXHTTP = function(url, callbackfunc) {
  return loadGET(url, "text", function(jqXHR, loadstatus, loadmessage) {
    var body, err, html;
    if (loadmessage == null) {
      loadmessage = null;
    }
    try {
      if (loadstatus === LoadStatusCodes.OK) {
        html = jqXHR.responseText;
        html = html.replace(/<img\b[^>]*>/ig, '');
        body = $(html);
        return callbackfunc(body, LoadStatusCodes.OK);
      } else {
        return callbackfunc(null, loadstatus, loadmessage);
      }
    } catch (_error) {
      err = _error;
      return callbackfunc(null, LoadStatusCodes.ERROR, err.message);
    }
  });
};

loadOauth = function(oauth, urlobj, callbackfunc) {
  return oauth.authorize(function() {
    var callbackhandler, params, request, url;
    url = urlobj.url;
    params = urlobj.params;
    request = {
      method: "GET",
      parameters: params
    };
    callbackhandler = function(resp, jqXHR) {
      var jsonObj;
      jsonObj = jQuery.parseJSON(jqXHR.responseText);
      return callbackfunc(jsonObj, LoadStatusCodes.OK, resp);
    };
    return oauth.sendSignedRequest(url, callbackhandler, request);
  });
};

loadGET = function(url, datatype, callbackfunc) {
  return $.ajax({
    type: "GET",
    dataType: datatype,
    url: url,
    cache: false,
    timeout: 20000,
    error: function(jqXHR, textStatus, errorThrown) {
      if (errorThrown === "Unauthorized" || errorThrown === "Not Found") {
        callbackfunc(null, LoadStatusCodes.UNAUTHORIZED);
      } else if (textStatus !== "parsererror") {
        console.log("Error Loading: " + textStatus + " error:" + errorThrown);
        callbackfunc(null, LoadStatusCodes.ERROR, errorThrown);
      }
    },
    complete: function(jqXHR, textStatus) {
      if (textStatus === "success") {
        return callbackfunc(jqXHR, LoadStatusCodes.OK);
      } else if (textStatus === "timeout") {
        return callbackfunc(jqXHR, LoadStatusCodes.TIMEOUT);
      } else if (textStatus === "abort") {
        return callbackfunc(jqXHR, LoadStatusCodes.TIMEOUT);
      } else if (textStatus === "parsererror") {
        jqXHR.responseText = jqXHR.responseText.substring(9);
        return callbackfunc(jqXHR, LoadStatusCodes.OK);
      }
    }
  });
};

loadURL = function(url, sitedomain, callbackfunc) {
  var cancel_listener, extension_listener, iframe, timeout_var;
  iframe = document.createElement("iframe");
  iframe.src = url;
  /*
  	iframe.id = "temp"
  	iframeWindow = top.frames['temp']
  	iframe.onload = () ->
  		alert top.frames['temp'].document.body.innerHTML
  		return
  	    alert($('#temp').contentWindow.document.body.innerHTML)
  */

  document.body.appendChild(iframe);
  extension_listener = function(request, sender, sendResponse) {
    if (request.msgtype !== "notifications") {
      return;
    }
    if (request.domain === sitedomain || request.url === url) {
      callbackfunc(request);
      cancel_listener(false);
      sendResponse({});
    }
  };
  cancel_listener = function(had_error) {
    var request;
    clearTimeout(timeout_var);
    chrome.extension.onRequest.removeListener(extension_listener);
    iframe.parentNode.removeChild(iframe);
    if (had_error) {
      request = {
        status: SiteStatus.HAD_ERROR,
        msg: "Failed Timeout"
      };
      return callbackfunc(request);
    }
  };
  chrome.extension.onRequest.addListener(extension_listener);
  timeout_var = setTimeout(cancel_listener, 15000, true);
};

headersIntercept = function() {
  var extraInfoSpec, handler, requestFilter;
  requestFilter = {
    urls: ["*://www.facebook.com/desktop_notifications/popup.php*", "*://*.facebook.com/messages*", "*://mail.google.com/*zy=h*", "*://accounts.google.com/ServiceLogin*", "*://www.reddit.com/message/inbox/*", "*://api.quora.com/api/*", "*://www.linkedin.com/inbox/*", "*://github.com/notifications*", "*://m.youtube.com/inbox*", "*://www.airbnb.com/home/inbox*", "*://www.fitocracy.com/notifications*", "*://www.flickr.com/mail/*", "*://foursquare.com/user/notifications*", "*://plus.google.com/*"],
    types: ["sub_frame"],
    tabId: -1
  };
  extraInfoSpec = ['responseHeaders', 'blocking'];
  handler = function(details) {
    var blockingResponse, header, headers, _i, _len;
    headers = details.responseHeaders;
    blockingResponse = {};
    for (_i = 0, _len = headers.length; _i < _len; _i++) {
      header = headers[_i];
      if (header.name === "X-Frame-Options" || header.name === "x-frame-options") {
        header.value = "";
      }
    }
    return {
      responseHeaders: headers
    };
  };
  chrome.webRequest.onHeadersReceived.addListener(handler, requestFilter, extraInfoSpec);
};

imageHandler = function(details) {
  if (details.tabId === -1 && details.parentFrameId !== -1) {
    return {
      cancel: true
    };
  }
};

blockImages = function(block) {
  var extraInfoSpec, requestFilter;
  if (block == null) {
    block = true;
  }
  requestFilter = {
    urls: ["*://*/*"],
    types: ["stylesheet", "image"],
    tabId: -1
  };
  extraInfoSpec = ['blocking'];
  if (block) {
    return chrome.webRequest.onBeforeRequest.addListener(imageHandler, requestFilter, extraInfoSpec);
  } else {
    return chrome.webRequest.onBeforeRequest.removeListener(imageHandler, requestFilter, extraInfoSpec);
  }
};
