// Generated by CoffeeScript 1.6.3
var ErrorLogs, FetchSpeedMultipliers, FirstState, checkSiteStatus, fetchNextQueue, fetchQueue, fetchSite, initScheduler, loadSite, onlineStatus, parseFeed, startScheduler, timervariable;

FetchSpeedMultipliers = {
  NORMAL: 1,
  SLOW: 2,
  OFFLINE: 5
};

ErrorLogs = {
  totalcount: 0,
  timeouts: 0,
  errors: 0
};

FirstState = {
  NORMAL: 1,
  SLOW: 2,
  OFFLINE: 5
};

onlineStatus = function() {
  var onlinevar;
  onlinevar = navigator.onLine;
  if (!onlinevar) {
    console.log("internet off");
  }
  return onlinevar;
};

timervariable = null;

initScheduler = function() {
  var site, _i, _len, _ref;
  _ref = root.sites;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    site = _ref[_i];
    site.setPriority(true);
  }
  return startScheduler(1000);
};

startScheduler = function(delay) {
  if (delay == null) {
    delay = 5000;
  }
  if (timervariable !== null) {
    clearTimeout(timervariable);
  }
  return timervariable = setTimeout(fetchQueue, delay);
};

fetchQueue = function() {
  var fetchsites;
  timervariable = null;
  fetchsites = root.sites;
  if (root.brandnew > 0) {
    if (Settings.SHOW_NOTIFS) {
      displayBrandnewNotifications();
    } else {
      clearBrandNewNotifications();
    }
  }
  if (onlineStatus()) {
    fetchNextQueue(0);
  } else {
    startScheduler();
  }
};

fetchNextQueue = function(index) {
  var nextIndex, site;
  if (!onlineStatus()) {
    startScheduler();
    return;
  }
  site = root.sites[index];
  if (index >= root.sites.length) {
    startScheduler();
    return;
  }
  nextIndex = index + 1;
  if (site.priority === null) {
    fetchNextQueue(nextIndex);
  } else if (site.priority <= 1) {
    fetchSite(site, function(status) {
      if (status === SiteStatus.FINISHED) {
        site.fetch_status = FetchStatus.REGULAR;
      } else {
        site.fetch_status = FetchStatus.PAUSE;
      }
      site.setPriority();
      fetchNextQueue(nextIndex);
    });
  } else {
    site.priority -= 1;
    fetchNextQueue(nextIndex);
  }
};

checkSiteStatus = function(site, callbackfunc) {
  if (!site.checkAuthorized()) {
    if (site.status !== SiteStatus.FINISHED) {
      site.checkLoggedIn(function(cookie_status) {
        if (cookie_status === LoadStatusCodes.OK) {
          return callbackfunc(LoadStatusCodes.NEED_AUTH);
        } else {
          return callbackfunc(cookie_status);
        }
      });
    } else {
      callbackfunc(LoadStatusCodes.UNAUTHORIZED);
    }
  } else if (site.option_quick_check && site.status === SiteStatus.FINISHED) {
    site.checkLoggedIn(function(cookie_status) {
      if (cookie_status === LoadStatusCodes.OK) {
        return site.checkForNew(function(site, status) {
          return callbackfunc(status);
        });
      } else {
        return callbackfunc(cookie_status);
      }
    });
  } else {
    site.checkLoggedIn(function(cookie_status) {
      return callbackfunc(cookie_status);
    });
  }
};

fetchSite = function(site, callback) {
  var cancelFetch, fetched, finishLoading, returnResult, timeout_counter;
  fetched = false;
  returnResult = function(status) {
    if (!fetched) {
      fetched = true;
      clearTimeout(timeout_counter);
      return callback(status);
    }
  };
  cancelFetch = function() {
    fetched = true;
    console.log("Timeout with " + site.name);
    callback(SiteStatus.TIMEOUT);
  };
  timeout_counter = setTimeout(cancelFetch, 25000);
  checkSiteStatus(site, function(status) {
    if (status === LoadStatusCodes.OK) {
      loadSite(site, function(site_status, aggregated_notifs, msg) {
        var brandNewNum, error;
        try {
          if (site_status === SiteStatus.FINISHED) {
            brandNewNum = site.merge_notifications(aggregated_notifs);
            updateBrandNewCount(brandNewNum);
            milestone("Loaded: " + site.name);
          } else if (site_status === SiteStatus.HAD_ERROR) {
            console.log("" + site.name + " failed due to " + error.message);
          }
          site.status = site_status;
          refreshDisplays();
        } catch (_error) {
          error = _error;
          console.log("" + site.name + " failed due to " + error.message);
        }
        returnResult(site_status);
      });
    } else {
      finishLoading(status);
    }
  });
  finishLoading = function(status) {
    switch (status) {
      case LoadStatusCodes.UNAUTHORIZED:
        site.status = SiteStatus.LOGGED_OUT;
        refreshDisplays();
        console.log("Logged out of " + site.name);
        return returnResult(status);
      case LoadStatusCodes.NO_NEW:
        site.status = SiteStatus.FINISHED;
        console.log("No new notifications for " + site.name);
        return returnResult(status);
      case LoadStatusCodes.OK:
        return milestone("Loading: " + site.name);
      case LoadStatusCodes.NEED_AUTH:
        milestone("Need Auth key for: " + site.name);
        site.status = SiteStatus.NEED_AUTH;
        refreshDisplays();
        return returnResult(status);
      case LoadStatusCodes.TIMEOUT:
        console.log("Timeout with " + site.name);
        site.status = SiteStatus.TIMEOUT;
        refreshDisplays();
        return returnResult(status);
      default:
        console.log("" + site.name + ": Unhandled error while checking for new notifications");
        site.status = SiteStatus.HAD_ERROR;
        refreshDisplays();
        return returnResult(status);
    }
  };
};

parseFeed = function(site, parseobj, loadstatus, loadmessage, callbackfunc) {
  var notifs, response, responsestatus, sitestatus, _ref;
  if (loadmessage == null) {
    loadmessage = null;
  }
  notifs = new Array;
  switch (loadstatus) {
    case LoadStatusCodes.OK:
      if (site.checkAuthorized) {
        _ref = site.parse(parseobj), responsestatus = _ref[0], notifs = _ref[1];
      }
      break;
    case LoadStatusCodes.ERROR:
      responsestatus = LoadStatusCodes.UNAUTHORIZED;
      break;
    default:
      responsestatus = loadstatus;
  }
  if (responsestatus === LoadStatusCodes.UNAUTHORIZED) {
    sitestatus = SiteStatus.LOGGED_OUT;
  } else if (responsestatus === LoadStatusCodes.OK) {
    sitestatus = SiteStatus.FINISHED;
  } else if (responsestatus === LoadStatusCodes.TIMEOUT) {
    sitestatus = SiteStatus.TIMEOUT;
  } else {
    sitestatus = SiteStatus.HAD_ERROR;
  }
  response = {
    notifs: notifs,
    status: sitestatus,
    msg: loadmessage
  };
  return callbackfunc(response);
};

loadSite = function(site, callbackfunc) {
  var loadNextUrl;
  loadNextUrl = function(url_index, aggregated_notifs) {
    var loadCallBack, site_url;
    loadCallBack = function(request) {
      var newindex;
      if (request.status !== SiteStatus.HAD_ERROR) {
        assert(request.notifs !== null, "Got no notifs");
        aggregated_notifs = aggregated_notifs.concat(request.notifs);
        newindex = url_index + 1;
        if (newindex >= site.callbackurl.length) {
          return callbackfunc(request.status, aggregated_notifs, request.msg);
        } else {
          return loadNextUrl(newindex, aggregated_notifs);
        }
      } else {
        return callbackfunc(request.status, aggregated_notifs, request.msg);
      }
    };
    site_url = site.callbackurl[url_index];
    if (site.option_feed_type === FeedType.HTML) {
      return loadURL(site_url, site.domain, loadCallBack);
    } else if (site.option_feed_type === FeedType.JSON) {
      return loadJSON(site_url, function(jsonobj, loadstatus, loadmessage) {
        if (loadmessage == null) {
          loadmessage = null;
        }
        return parseFeed(site, jsonobj, loadstatus, loadmessage, loadCallBack);
      });
    } else if (site.option_feed_type === FeedType.OAUTH) {
      return loadOauth(site.oauth, site_url, function(jsonobj, loadstatus, loadmessage) {
        if (loadmessage == null) {
          loadmessage = null;
        }
        return parseFeed(site, jsonobj, loadstatus, loadmessage, loadCallBack);
      });
    } else if (site.option_feed_type === FeedType.XHTTP) {
      return loadXHTTP(site_url, function(body, loadstatus, loadmessage) {
        if (loadmessage == null) {
          loadmessage = null;
        }
        return parseFeed(site, body, loadstatus, loadmessage, loadCallBack);
      });
    }
  };
  loadNextUrl(0, new Array);
};
