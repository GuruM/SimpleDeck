// Generated by CoffeeScript 1.6.3

String.prototype.hashCode = function(){
    var hash = 0, i, char;
    if (this.length == 0) return hash;
    for (i = 0; i < this.length; i++) {
        char = this.charCodeAt(i);
        hash = ((hash<<5)-hash)+char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
};

function getURLParameter(name) {
    return decodeURI(
        (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search)||[,null])[1]
    );
}

function time_diff(earlierDate,laterDate)
{
       var nTotalDiff = laterDate.getTime() - earlierDate.getTime();
       var oDiff = new Object();
 
       oDiff.days = Math.floor(nTotalDiff/1000/60/60/24);
       nTotalDiff -= oDiff.days*1000*60*60*24;
 
       oDiff.hours = Math.floor(nTotalDiff/1000/60/60);
       nTotalDiff -= oDiff.hours*1000*60*60;
 
       oDiff.minutes = Math.floor(nTotalDiff/1000/60);
       nTotalDiff -= oDiff.minutes*1000*60;
 
       oDiff.seconds = Math.floor(nTotalDiff/1000);
 
       return oDiff;
 
}

;
var checkDate, copyArray, getter, in_iframe, openInNewTab, randomInt, setter;

jQuery.fn.justtext = function(removestr) {
  var element;
  element = $(this);
  return element.clone().children().remove(removestr).end();
};

in_iframe = function() {
  return window !== window.top;
};

randomInt = function(lower, upper) {
  var start, _ref, _ref1;
  if (upper == null) {
    upper = 0;
  }
  start = Math.random();
  if (lower == null) {
    _ref = [0, lower], lower = _ref[0], upper = _ref[1];
  }
  if (lower > upper) {
    _ref1 = [upper, lower], lower = _ref1[0], upper = _ref1[1];
  }
  return Math.floor(start * (upper - lower + 1) + lower);
};

copyArray = function(arr) {
  return arr.slice(0);
};

checkDate = function(d) {
  if (d === null) {
    return false;
  }
  if (Object.prototype.toString.call(d) === "[object Date]") {
    if (isNaN(d.getTime())) {
      return false;
    } else {
      return true;
    }
  } else {
    return false;
  }
};

Array.prototype.remove = function(e) {
  var t, _ref;
  if ((t = this.indexOf(e)) > -1) {
    return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
  }
};

Array.prototype.merge = function(other) {
  return Array.prototype.push.apply(this, other);
};

getter = function(obj, prop, get) {
  return Object.defineProperty(obj, prop, {
    get: get,
    configurable: true
  });
};

setter = function(obj, prop, set) {
  return Object.defineProperty(obj, prop, {
    set: set,
    configurable: true
  });
};

Function.prototype.getter = function(prop, get) {
  return Object.defineProperty(this.prototype, prop, {
    get: get,
    configurable: true
  });
};

Function.prototype.setter = function(prop, set) {
  return Object.defineProperty(this.prototype, prop, {
    set: set,
    configurable: true
  });
};

openInNewTab = function(url) {
  var propreties;
  propreties = {
    url: url,
    active: true
  };
  chrome.tabs.create(propreties, function(tab) {
    var error, windowpropreties;
    windowpropreties = {
      focused: true
    };
    try {
      chrome.windows.update(tab.windowId, windowpropreties, function() {});
    } catch (_error) {
      error = _error;
    }
  });
};
